// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/dinorain/kalobranded/internal/models"
	utils "github.com/dinorain/kalobranded/pkg/utils"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockBrandUseCase is a mock of BrandUseCase interface.
type MockBrandUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBrandUseCaseMockRecorder
}

// MockBrandUseCaseMockRecorder is the mock recorder for MockBrandUseCase.
type MockBrandUseCaseMockRecorder struct {
	mock *MockBrandUseCase
}

// NewMockBrandUseCase creates a new mock instance.
func NewMockBrandUseCase(ctrl *gomock.Controller) *MockBrandUseCase {
	mock := &MockBrandUseCase{ctrl: ctrl}
	mock.recorder = &MockBrandUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrandUseCase) EXPECT() *MockBrandUseCaseMockRecorder {
	return m.recorder
}

// CachedFindById mocks base method.
func (m *MockBrandUseCase) CachedFindById(ctx context.Context, brandID uuid.UUID) (*models.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachedFindById", ctx, brandID)
	ret0, _ := ret[0].(*models.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CachedFindById indicates an expected call of CachedFindById.
func (mr *MockBrandUseCaseMockRecorder) CachedFindById(ctx, brandID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachedFindById", reflect.TypeOf((*MockBrandUseCase)(nil).CachedFindById), ctx, brandID)
}

// DeleteById mocks base method.
func (m *MockBrandUseCase) DeleteById(ctx context.Context, brandID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, brandID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockBrandUseCaseMockRecorder) DeleteById(ctx, brandID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockBrandUseCase)(nil).DeleteById), ctx, brandID)
}

// FindAll mocks base method.
func (m *MockBrandUseCase) FindAll(ctx context.Context, pagination *utils.Pagination) ([]models.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, pagination)
	ret0, _ := ret[0].([]models.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockBrandUseCaseMockRecorder) FindAll(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockBrandUseCase)(nil).FindAll), ctx, pagination)
}

// FindById mocks base method.
func (m *MockBrandUseCase) FindById(ctx context.Context, brandID uuid.UUID) (*models.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, brandID)
	ret0, _ := ret[0].(*models.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockBrandUseCaseMockRecorder) FindById(ctx, brandID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockBrandUseCase)(nil).FindById), ctx, brandID)
}

// Register mocks base method.
func (m *MockBrandUseCase) Register(ctx context.Context, brand *models.Brand) (*models.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, brand)
	ret0, _ := ret[0].(*models.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockBrandUseCaseMockRecorder) Register(ctx, brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockBrandUseCase)(nil).Register), ctx, brand)
}

// UpdateById mocks base method.
func (m *MockBrandUseCase) UpdateById(ctx context.Context, brand *models.Brand) (*models.Brand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, brand)
	ret0, _ := ret[0].(*models.Brand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockBrandUseCaseMockRecorder) UpdateById(ctx, brand interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockBrandUseCase)(nil).UpdateById), ctx, brand)
}
